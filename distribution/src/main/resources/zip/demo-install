#!/bin/sh

set -o nounset
set -o errexit
set -o pipefail

#Variables generated by build
product_full_name="@{distribution.product.full.name}"
default_install_dir="@{distribution.default.install.dir}"
default_data_dir="@{distribution.default.data.dir}"
dir_permission_mode="@{mode.dir}"
rpm_file="@{distribution.package.rpm.file}"

function show_help() {
  echo "Usage:"
  echo "  $(basename $0) [OPTION...]"
  echo ""
  echo "Description:"
  echo "  $(basename $0) is a command for installing $product_full_name."
  echo ""
  echo "Options:"
  echo "  -i DIRECTORY"
  echo "    Specifies the installation directory where $product_full_name will be installed."
  echo "    Default value is $default_install_dir."
  echo "    The directory must be readable and writable by the user executing the command."
  echo ""
  echo "  -d DIRECTORY"
  echo "    Specifies the data directory where configuration and log files will be stored."
  echo "    Default value is $default_data_dir."
  echo "    The directory must be readable and writable by the user executing the command."
  echo ""
  echo "  -r DIRECTORY"
  echo "    Specifies the custom RPM database directory rather than the default /var/lib/rpm."
  echo "    The directory must be readable and writable by the user executing the command."
  echo "    This option is mandatory when installing as non-root OS user."
  echo ""
  echo "  -z"
  echo "    Remove configuration and log files from the previous installation in the specified data directory."
  echo "    If this option is not specified and the data directory already exists,"
  echo "    the installation process will terminate with error without any modification of the file system."
  echo ""
  echo "  -h"
  echo "    Print a usage message briefly summarizing these command-line options, then exit."
  echo ""
  echo "Exit status:"
  echo "  Exits with status 0 if a command executed successfully, greater than 0 if errors occur."
}

function error_and_exit() {
  echo "ERROR: $*" >&2
  exit 1
}

# Set default mode mask for all files and directories created by this script
permission_mask="$(expr 777 - $dir_permission_mode)"
umask "$permission_mask"

#Global variables: set to default values, update with user-defined values if needed
install_dir="$default_install_dir"
data_dir="$default_data_dir"
rpm_db_dir=""
cleanup_data_dir="false"
while getopts ":hi:d:r:z" opt
do
  case "$opt" in
    h)
      show_help
      exit 0
    ;;
    i)
      install_dir="$OPTARG"
    ;;
    d)
      data_dir="$OPTARG"
    ;;
    r)
      rpm_db_dir="$OPTARG"
    ;;
    z)
      cleanup_data_dir="true"
    ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      show_help
      exit 1
    ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      show_help
      exit 1
    ;;
  esac
done
if test $OPTIND -le "$#"
then
  echo "Invalid options: $@" >&2
  show_help
  exit 1
fi

#Cleanup data directory if requested
if test "$cleanup_data_dir" = "true"
then
  cmd_out="$(rm -r "$data_dir" 2>&1)" || error_and_exit "Failed to remove the data directory:$data_dir. Reason: $cmd_out"
fi

# Check for previous installation
test -d "$install_dir" && error_and_exit "Installation directory already exists: $install_dir"
test -d "$data_dir" && error_and_exit "Data directory already exists: $data_dir"

rpm_options=""

# Create and initialize PRM database
if test ! -z "$rpm_db_dir"
then
  rpm_options="$rpm_options --dbpath \"$rpm_db_dir\""

  # Create RPM DB directory
  if test ! -d "$rpm_db_dir"
  then
    cmd_out="$(mkdir -p "$rpm_db_dir" 2>&1)" || error_and_exit "Failed to create RPM DB directory at $rpm_db_dir. Reason: $cmd_out"
  fi

  # Initialize RPM DB
  if ! rpm -qa --dbpath "$rpm_db_dir" >/dev/null 2>&1
  then
    cmd_out="$(rpm --initdb --dbpath "$rpm_db_dir" 2>&1)" || error_and_exit "Failed to initialize RPM DB at $rpm_db_dir. Reason: $cmd_out"
  fi
fi

# Installing RPM package
rpm_options="--prefix \"$install_dir\" $rpm_options"
base_dir="$(dirname "$0")"
cmd_out="$(eval rpm -ihv $rpm_options \"$base_dir/$rpm_file\" 2>&1)" || error_and_exit "Failed to install rpm package with arguments $rpm_options: $base_dir/$rpm_file. Reason: $cmd_out"
