#!/bin/sh

set -o nounset
set -o errexit
set -o pipefail

#Variables generated by build
product_full_name="@{distribution.product.full.name}"
product_short_name="@{distribution.product.short.name}"
permission_mode="@{mode.dir}"
product_config_file="@{product.config.file}"

function show_help() {
  echo "Usage:"
  echo "  $(basename $0) [OPTION]"
  echo ""
  echo "Description:"
  echo "  $(basename $0) is a command for uninstalling $product_full_name."
  echo "  All running applications of $product_full_name should be stopped before executing this command, otherwise the command will exit immediately with error."
  echo ""
  echo "Options:"
  echo "  -h"
  echo "    Print a usage message briefly summarizing these command-line options, then exit."
  echo ""
  echo "Exit status:"
  echo "  Exits with status 0 if a command executed successfully, greater than 0 if errors occur."
}

# Set default mode mask for all files and directories created by this script
permission_mask="$(expr 777 - $permission_mode)"
umask "$permission_mask"

if echo "$0" | grep -q /
then
    # Started with absolute or relative path
	install_dir="$(cd "$(dirname -- "$0")" ; cd .. ; pwd)"
else
	# Started from PATH
	install_dir="$(cd "$(dirname -- "$(which "$0")")" ; cd .. ; pwd)"
fi

# Load installation parameters
# The environment lib has been generated during installation
source "$install_dir/libexec/lib_env.sh"

# Load environment
source "$install_dir/libexec/lib_log.sh"
source "$install_dir/libexec/lib_java.sh"

log_info "Invoked as: $(cd "$(dirname "$0")" && pwd)/$(basename "$0") ${@:-}"

# Load user-configurable settings
# data_dir is declared in the environment lib
source "$data_dir/conf/$product_config_file"

# Check that script was called with --help option, or without option at all
if test $# -gt 0
then
  option="$1"
  shift
  case "$option" in
    -h)
      show_help
      exit 0
    ;;
    *)
      log_error "Invalid option: \"$option\""
      show_help
      exit 1
    ;;
  esac
fi

if ps -ef | grep -i -- "-D$product_short_name" | grep -v "$(basename $0)" | grep -v grep
then
  error_and_exit "Cannot uninstall as some applications of $product_full_name are currently running"
fi

log_info "The data directory will not be deleted during unistallation:  $data_dir"

#Erase rpm package
if test ! -z "$rpm_db_dir"
then
	options="--dbpath \"$rpm_db_dir\""
else
	options=""
fi

stderr="$(eval rpm -e $options \"$package_name\" 2>&1)" || error_and_exit "Unable to erase $product_full_name package. Reason: $stderr"

# Remove installation directory
stderr="$(eval rm -r \"$install_dir\" 2>&1 </dev/null)" || error_and_exit "Unable to remove installation directory. Reason: $stderr"

log_info "$product_full_name was successfully uninstalled"
